# Form implementation generated from reading ui file 'test_proj.ui'
#
# Created by: PyQt6 UI code generator 6.4.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.
import threading
import time

import keyboard
from PyQt6.QtGui import QIntValidator

from PyQt6 import QtCore, QtGui, QtWidgets
from PyQt6.QtCore import Qt, QThread, pyqtSignal
from classes import pick_window_class
from classes.clicker import Clicker
from classes.read_hotkey import ReadHotkey


# class PickLocation(QThread):
#     finished = pyqtSignal(list)
#
#     def run(self):
#         print('Hel')
#         pick_window = pick_window_class.PickWindow()
#         pick_window.start_program()
#         print('ttt')
#         self.finished.emit([121, 890])


class Ui_Dialog(object):
    def __init__(self):
        self.clicker = Clicker()
        self.default_hotkey = 'f6'
        self.win_width = 511
        self.win_height = 433
        self.clicker_is_running = False
        self.icon_path = 'bin/icon.ico'
        self.window_name = 'Auto-Clicker'
        self.options = {
            'interval_millisec': 100,
            'interval_sec': 0,
            'interval_min': 0,
            'interval_hours': 0,
            'interval': 0,
            'mouse_button': 'Left',
            'click_type': 'Single',
            'duration': 0,
            'anti_detect_enabled': False,
            'anti_detect': 0,
            'click_repeat_enabled': False,
            'click_repeat': 10,
            'cursor_position_enabled': False,
            'cursor_position': [0, 0],
            'random_interval_enabled': False,
            'random_interval': 0,
            'hotkey': self.default_hotkey}
        self.convert_interval()
        self.hotkey_label_font = "<html><head/><body><p><span style=\" " \
                                 "font-size:14pt;\">{}</span></p></body></html>"
        self.tool_tips = {
            'anti_detect': 'The mouse will click in random places around the set location',
            'duration': 'How long the mouse will be held in the "Pressed state" (In seconds)'
        }

    def switch_group_boxes(self, enable: bool = True):
        """Disable or enable all group-boxes in Dialog"""
        for widget in self.Dialog.findChildren(QtWidgets.QGroupBox):
            widget.setEnabled(enable)

    def convert_interval(self):
        """Convert interval to milliseconds"""
        self.options['interval'] = (self.options['interval_millisec'] +
                                    self.options['interval_sec'] * 1000 +
                                    self.options['interval_min'] * 60 * 1000 +
                                    self.options['interval_hours'] * 60 * 60 * 1000) / 1000

    def on_hotkey(self):
        """Fired when the hotkey is pressed"""
        if self.clicker_is_running:
            self.on_stop_btn_clicked()
        else:
            self.on_start_btn_clicked()

    def start_clicker(self):
        """Function to put all variables in the clicker and run it"""
        self.clicker.start(
            self.options['interval'],
            self.options['click_repeat'] if self.options['click_repeat_enabled'] else -1,
            self.options['duration'],
            self.options['mouse_button'].lower(),
            self.options['click_type'].lower(),
            self.options['cursor_position'][0] if self.options['cursor_position_enabled'] else None,
            self.options['cursor_position'][1] if self.options['cursor_position_enabled'] else None,
            self.options['anti_detect'] if self.options['anti_detect_enabled'] else 0,
            self.options['random_interval'] if self.options['random_interval_enabled'] else 0
        )

    def on_start_btn_clicked(self):
        """
        Fired when the start button is clicked
        Takes all values from all inputs and starts auto-clicker
        Disables all group boxes, disables start button and enables stop button
        """
        self.clicker_is_running = True
        self.switch_group_boxes(False)
        self.start_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)
        self.Dialog.showMinimized()
        self.options['interval_millisec'] = self.millisec_interval_input.value()
        self.options['interval_sec'] = self.sec_interval_input.value()
        self.options['interval_min'] = self.min_interval_input.value()
        self.options['interval_hours'] = self.hours_interval_input.value()
        self.convert_interval()
        self.options['anti_detect_enabled'] = self.custom_location_radio_button.isChecked()
        self.options['anti_detect'] = self.anti_detect_input.value()
        self.options['duration'] = round(self.duration_input.value(), 2)
        self.options['mouse_button'] = self.mouse_button_choice.currentText()
        self.options['click_type'] = self.click_type_choice.currentText()
        self.options['click_repeat_enabled'] = self.repeat_n_times_radio_button.isChecked()
        self.options['click_repeat'] = self.repeat_n_times_input.value()
        self.options['cursor_position_enabled'] = self.custom_location_radio_button.isChecked()
        self.options['cursor_position'][0] = int(self.custom_x_input.text())
        self.options['cursor_position'][1] = int(self.custom_y_input.text())
        self.options['random_interval_enabled'] = self.random_interval_check_box.isChecked()
        self.options['random_interval'] = self.random_interval_input.value()
        threading.Thread(target=self.start_clicker).start()

    def on_stop_btn_clicked(self):
        """
        Fired when the stop button is clicked
        It enables all group boxes, disables stop button and enables start button
        """
        self.clicker_is_running = False
        self.switch_group_boxes(True)
        self.start_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.clicker.stop_clicking()

    def on_random_interval_check_box_clicked(self):
        """Fired when the random interval check box is clicked"""
        if self.random_interval_check_box.isChecked():
            self.random_interval_input.setEnabled(True)
        else:
            self.random_interval_input.setEnabled(False)

    def on_current_location_radio_btn_clicked(self):
        """Fired when the current location radio button is clicked"""
        if not self.custom_location_radio_button.isChecked():
            self.anti_detect_input.setEnabled(False)
            self.custom_y_label.setEnabled(False)
            self.custom_x_label.setEnabled(False)
            self.custom_y_input.setEnabled(False)
            self.custom_x_input.setEnabled(False)
            self.pick_loc_btn.setEnabled(False)

    def on_custom_location_radio_btn_clicked(self):
        # ToDO: Pick Location Button is not ready yet
        """Fired when custom location radio button is clicked"""
        if self.custom_location_radio_button.isChecked():
            self.anti_detect_input.setEnabled(True)
            self.custom_y_label.setEnabled(True)
            self.custom_x_label.setEnabled(True)
            self.custom_y_input.setEnabled(True)
            self.custom_x_input.setEnabled(True)
            self.pick_loc_btn.setEnabled(False)  # temporary disabled

    def on_set_default_hotkey_btn_clicked(self):
        """
        Fired set the default hotkey button is clicked
        Changes the current hotkey to default
        """
        keyboard.remove_hotkey(self.options['hotkey'])
        self.options['hotkey'] = self.default_hotkey
        self.hotkey_label.setText(self.hotkey_label_font.format(self.options['hotkey'].upper()))
        self.start_btn.setText(f"Start ({self.options['hotkey'].upper()})")
        self.stop_btn.setText(f"Stop ({self.options['hotkey'].upper()})")
        keyboard.add_hotkey(self.options['hotkey'], self.on_hotkey, suppress=True)

    def on_set_hotkey_btn_clicked(self):
        """
        Fired when the set hotkey button is clicked
        Takes a new hotkey from the keyboard and disables the dialog until it gets a new hotkey
        """
        self.Dialog.setDisabled(True)
        self.hotkey_label.setText('ENTER HOTKEY')
        keyboard.remove_hotkey(self.options['hotkey'])
        self.set_hotkey = ReadHotkey()
        self.set_hotkey.finished.connect(self.setting_hotkey_finished)
        self.set_hotkey.start()

    def setting_hotkey_finished(self, hotkey):
        """Fired when setting hotkey is finished"""
        self.Dialog.setDisabled(False)
        self.options['hotkey'] = hotkey
        self.hotkey_label.setText(self.hotkey_label_font.format(self.options['hotkey'].upper()))
        self.start_btn.setText(f"Start ({self.options['hotkey'].upper()})")
        self.stop_btn.setText(f"Stop ({self.options['hotkey'].upper()})")
        keyboard.add_hotkey(self.options['hotkey'], self.on_hotkey, suppress=True)

    def on_until_stopped_radio_button_clicked(self):
        """Fired when the until stopped radio button is clicked"""
        if not self.repeat_n_times_radio_button.isChecked():
            self.repeat_n_times_input.setEnabled(False)

    def on_repeat_n_times_radio_button_clicked(self):
        """Fired when the "repeat n times radio button" is clicked"""
        if self.repeat_n_times_radio_button.isChecked():
            self.repeat_n_times_input.setEnabled(True)

    def on_pick_loc_btn_clicked(self):
        # ToDO
        pass
        # self.switch_group_boxes(False)
        # self.pick_loc = pick_window_class.PickLocation()
        # self.pick_loc.finished.connect(self.picking_location_finished)
        # self.pick_loc.start()

    def picking_location_finished(self, coordinates):
        # ToDo
        print(coordinates)

    def setupUi(self, Dialog):
        self.Dialog = Dialog
        keyboard.add_hotkey(self.options['hotkey'], self.on_hotkey, suppress=True)
        Dialog.setObjectName("Dialog")
        Dialog.setWindowModality(QtCore.Qt.WindowModality.NonModal)
        Dialog.setEnabled(True)
        Dialog.resize(self.win_width, self.win_height)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed,
                                           QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Dialog.sizePolicy().hasHeightForWidth())
        Dialog.setSizePolicy(sizePolicy)
        Dialog.setFixedSize(self.win_width, self.win_height)
        Dialog.setMaximumSize(QtCore.QSize(self.win_width, self.win_height))
        Dialog.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        Dialog.setMouseTracking(False)
        Dialog.setWindowFlags(
            QtCore.Qt.WindowType.WindowMinimizeButtonHint |
            QtCore.Qt.WindowType.WindowCloseButtonHint)
        Dialog.setStyleSheet("QGroupBox {\n"
                             "    border: 1px solid gray;\n"
                             "    border-radius: 10px;\n"
                             "}\n"
                             "QLineEdit {\n"
                             "    border: 1px solid gray;\n"
                             "    border-radius: 4px;\n"
                             "}\n"
                             "QGroupBox::title {\n"
                             "    subcontrol-origin: margin;\n"
                             "    subcontrol-position: top left;\n"
                             "    padding: 0 3px;\n"
                             "    border: 1px solid gray;\n"
                             "    border-radius: 2px;\n"
                             "    margin-top: -0.1em;\n"
                             "    margin-left: -0.1em;\n"
                             "}\n"
                             "QLabel {\n"
                             "    border-radius: 10px;\n"
                             "}\n"
                             "QAbstractSpinBox {\n"
                             "    border-radius: 4px;\n"
                             "    border: 1px solid gray;\n"
                             "}\n"
                             "\n"
                             "QComboBox {\n"
                             "    border-radius: 4px;\n"
                             "    border: 1px solid gray;\n"
                             "}\n"
                             "\n"
                             "\n"
                             "QComboBox:hover\n"
                             "{\n"
                             "\n"
                             "}\n"
                             "\n"
                             "\n"
                             "QComboBox::drop-down\n"
                             "{\n"
                             "     width: 0px;\n"
                             "}\n"
                             "QComboBox QAbstractItemView\n"
                             "{\n"
                             "    border: 1px solid gray;\n"
                             "    color: black;\n"
                             "    selection-background-color: gray;\n"
                             "    border-radius: 3px;\n"
                             "}\n"
                             "QPushButton {\n"
                             "border: 1px solid gray;\n"
                             "border-radius: 7px;\n"
                             "background-color:#e3e3e3;\n"
                             "}\n"
                             "QPushButton:disabled {\n"
                             "border: 0px;\n"
                             "background-color:#cfcfcf;\n"
                             "}\n"
                             "    \n"
                             "    QPushButton:hover {\n"
                             "        background-color: #c2c2c2;\n"
                             "border: 1px solid black;\n"
                             "color: black;\n"
                             "    }\n"
                             "    \n"
                             "    QPushButton:pressed {\n"
                             "        background-color: gray;\n"
                             "        color: white;\n"
                             "    }")
        Dialog.setInputMethodHints(QtCore.Qt.InputMethodHint.ImhNone)
        Dialog.setModal(False)
        self.click_interval_group_box = QtWidgets.QGroupBox(parent=Dialog)
        self.click_interval_group_box.setEnabled(True)
        self.click_interval_group_box.setGeometry(QtCore.QRect(10, 10, 491, 61))
        self.click_interval_group_box.setStyleSheet("QGroupBox::title {\n"
                                                    "  margin-top: -0.45em;\n"
                                                    "  subcontrol-position: top center;\n"
                                                    "}\n"
                                                    "QAbstractSpinBox {\n"
                                                    "    border-radius: 10px;\n"
                                                    "    border: 1px solid gray;\n"
                                                    "}")
        self.click_interval_group_box.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.click_interval_group_box.setObjectName("click_interval_group_box")
        self.sec_interval_label = QtWidgets.QLabel(parent=self.click_interval_group_box)
        self.sec_interval_label.setGeometry(QtCore.QRect(250, 40, 111, 16))
        self.sec_interval_label.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.sec_interval_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.sec_interval_label.setObjectName("sec_interval_label")
        self.min_interval_label = QtWidgets.QLabel(parent=self.click_interval_group_box)
        self.min_interval_label.setGeometry(QtCore.QRect(130, 40, 111, 16))
        self.min_interval_label.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.min_interval_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.min_interval_label.setObjectName("min_interval_label")
        self.millisec_interval_label = QtWidgets.QLabel(parent=self.click_interval_group_box)
        self.millisec_interval_label.setGeometry(QtCore.QRect(370, 40, 111, 16))
        self.millisec_interval_label.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.millisec_interval_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.millisec_interval_label.setObjectName("millisec_interval_label")
        self.hours_interval_label = QtWidgets.QLabel(parent=self.click_interval_group_box)
        self.hours_interval_label.setGeometry(QtCore.QRect(10, 40, 111, 16))
        self.hours_interval_label.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.hours_interval_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.hours_interval_label.setObjectName("hours_interval_label")
        self.millisec_interval_input = QtWidgets.QSpinBox(parent=self.click_interval_group_box)
        self.millisec_interval_input.setEnabled(True)
        self.millisec_interval_input.setGeometry(QtCore.QRect(370, 20, 111, 20))
        self.millisec_interval_input.setFocusPolicy(QtCore.Qt.FocusPolicy.ClickFocus)
        self.millisec_interval_input.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.millisec_interval_input.setButtonSymbols(QtWidgets.QAbstractSpinBox.ButtonSymbols.NoButtons)
        self.millisec_interval_input.setObjectName("millisec_interval_input")
        self.millisec_interval_input.setMaximum(9999999)
        self.millisec_interval_input.setValue(self.options['interval_millisec'])
        self.millisec_interval_input.setSingleStep(3)
        self.sec_interval_input = QtWidgets.QSpinBox(parent=self.click_interval_group_box)
        self.sec_interval_input.setEnabled(True)
        self.sec_interval_input.setGeometry(QtCore.QRect(250, 20, 111, 20))
        self.sec_interval_input.setFocusPolicy(QtCore.Qt.FocusPolicy.ClickFocus)
        self.sec_interval_input.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.sec_interval_input.setButtonSymbols(QtWidgets.QAbstractSpinBox.ButtonSymbols.NoButtons)
        self.sec_interval_input.setObjectName("sec_interval_input")
        self.sec_interval_input.setMaximum(9999999)
        self.sec_interval_input.setValue(self.options['interval_sec'])
        self.min_interval_input = QtWidgets.QSpinBox(parent=self.click_interval_group_box)
        self.min_interval_input.setEnabled(True)
        self.min_interval_input.setGeometry(QtCore.QRect(130, 20, 111, 20))
        self.min_interval_input.setFocusPolicy(QtCore.Qt.FocusPolicy.ClickFocus)
        self.min_interval_input.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.min_interval_input.setButtonSymbols(QtWidgets.QAbstractSpinBox.ButtonSymbols.NoButtons)
        self.min_interval_input.setObjectName("min_interval_input")
        self.min_interval_input.setMaximum(9999999)
        self.min_interval_input.setValue(self.options['interval_min'])
        self.hours_interval_input = QtWidgets.QSpinBox(parent=self.click_interval_group_box)
        self.hours_interval_input.setEnabled(True)
        self.hours_interval_input.setGeometry(QtCore.QRect(10, 20, 111, 20))
        self.hours_interval_input.setFocusPolicy(QtCore.Qt.FocusPolicy.ClickFocus)
        self.hours_interval_input.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.hours_interval_input.setButtonSymbols(QtWidgets.QAbstractSpinBox.ButtonSymbols.NoButtons)
        self.hours_interval_input.setObjectName("hours_interval_input")
        self.hours_interval_input.setMaximum(9999999)
        self.hours_interval_input.setValue(self.options['interval_hours'])
        self.click_options_group_box = QtWidgets.QGroupBox(parent=Dialog)
        self.click_options_group_box.setGeometry(QtCore.QRect(11, 80, 341, 91))
        self.click_options_group_box.setStyleSheet("")
        self.click_options_group_box.setObjectName("click_options_group_box")
        self.mouse_button_choice = QtWidgets.QComboBox(parent=self.click_options_group_box)
        self.mouse_button_choice.setGeometry(QtCore.QRect(101, 27, 71, 22))
        self.mouse_button_choice.setFocusPolicy(QtCore.Qt.FocusPolicy.ClickFocus)
        self.mouse_button_choice.setStyleSheet("")
        self.mouse_button_choice.setObjectName("mouse_button_choice")
        self.mouse_button_choice.addItem("")
        self.mouse_button_choice.addItem("")
        self.mouse_button_choice.addItem("")
        self.click_type_choice = QtWidgets.QComboBox(parent=self.click_options_group_box)
        self.click_type_choice.setGeometry(QtCore.QRect(100, 58, 71, 22))
        self.click_type_choice.setFocusPolicy(QtCore.Qt.FocusPolicy.ClickFocus)
        self.click_type_choice.setObjectName("click_type_choice")
        self.click_type_choice.addItem("")
        self.click_type_choice.addItem("")
        self.click_type_choice.addItem("")
        self.mouse_button_label = QtWidgets.QLabel(parent=self.click_options_group_box)
        self.mouse_button_label.setGeometry(QtCore.QRect(12, 30, 82, 16))
        self.mouse_button_label.setObjectName("mouse_button_label")
        self.click_type_label = QtWidgets.QLabel(parent=self.click_options_group_box)
        self.click_type_label.setGeometry(QtCore.QRect(12, 60, 63, 16))
        self.click_type_label.setMinimumSize(QtCore.QSize(61, 0))
        self.click_type_label.setObjectName("click_type_label")
        self.duration_input = QtWidgets.QDoubleSpinBox(parent=self.click_options_group_box)
        self.duration_input.setGeometry(QtCore.QRect(270, 27, 61, 22))
        self.duration_input.setFocusPolicy(QtCore.Qt.FocusPolicy.ClickFocus)
        self.duration_input.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.duration_input.setButtonSymbols(QtWidgets.QAbstractSpinBox.ButtonSymbols.NoButtons)
        self.duration_input.setSingleStep(0.05)
        self.duration_input.setObjectName("duration_input")
        self.duration_input.setValue(self.options['duration'])
        self.duration_label = QtWidgets.QLabel(parent=self.click_options_group_box)
        self.duration_label.setGeometry(QtCore.QRect(210, 30, 61, 16))
        self.duration_label.setObjectName("duration_label")
        self.duration_label.setToolTip(self.tool_tips['duration'])
        self.anti_detect_label = QtWidgets.QLabel(parent=self.click_options_group_box)
        self.anti_detect_label.setGeometry(QtCore.QRect(210, 60, 71, 16))
        self.anti_detect_label.setObjectName("anti_detect_label")
        self.anti_detect_label.setToolTip(self.tool_tips['anti_detect'])
        self.anti_detect_input = QtWidgets.QSpinBox(parent=self.click_options_group_box)
        self.anti_detect_input.setEnabled(False)
        self.anti_detect_input.setGeometry(QtCore.QRect(289, 58, 42, 22))
        self.anti_detect_input.setFocusPolicy(QtCore.Qt.FocusPolicy.ClickFocus)
        self.anti_detect_input.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.anti_detect_input.setButtonSymbols(QtWidgets.QAbstractSpinBox.ButtonSymbols.NoButtons)
        self.anti_detect_input.setObjectName("anti_detect_input")
        self.anti_detect_input.setValue(self.options['anti_detect'])
        self.click_repeat_group_box = QtWidgets.QGroupBox(parent=Dialog)
        self.click_repeat_group_box.setGeometry(QtCore.QRect(360, 80, 141, 91))
        self.click_repeat_group_box.setObjectName("click_repeat_group_box")
        self.repeat_n_times_input = QtWidgets.QSpinBox(parent=self.click_repeat_group_box)
        self.repeat_n_times_input.setEnabled(False)
        self.repeat_n_times_input.setGeometry(QtCore.QRect(85, 60, 41, 20))
        self.repeat_n_times_input.setFocusPolicy(QtCore.Qt.FocusPolicy.ClickFocus)
        self.repeat_n_times_input.setStyleSheet("")
        self.repeat_n_times_input.setButtonSymbols(QtWidgets.QAbstractSpinBox.ButtonSymbols.NoButtons)
        self.repeat_n_times_input.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.repeat_n_times_input.setObjectName("repeat_interval_input")
        self.repeat_n_times_input.setValue(self.options['click_repeat'])
        self.repeat_n_times_input.setMaximum(99999)
        self.repeat_n_times_radio_button = QtWidgets.QRadioButton(parent=self.click_repeat_group_box)
        self.repeat_n_times_radio_button.setGeometry(QtCore.QRect(12, 60, 72, 20))
        self.repeat_n_times_radio_button.setObjectName("repeat_n_times_radio_button")
        self.buttonGroup = QtWidgets.QButtonGroup(Dialog)
        self.buttonGroup.setObjectName("buttonGroup")
        self.buttonGroup.addButton(self.repeat_n_times_radio_button)
        self.until_stopped_radio_button = QtWidgets.QRadioButton(parent=self.click_repeat_group_box)
        self.until_stopped_radio_button.setEnabled(True)
        self.until_stopped_radio_button.setGeometry(QtCore.QRect(12, 30, 101, 20))
        self.until_stopped_radio_button.setChecked(True)
        self.until_stopped_radio_button.setObjectName("until_stopped_radio_button")
        self.buttonGroup.addButton(self.until_stopped_radio_button)
        self.start_btn = QtWidgets.QPushButton(parent=Dialog)
        self.start_btn.setGeometry(QtCore.QRect(10, 380, 241, 45))
        self.start_btn.setMinimumSize(QtCore.QSize(0, 45))
        self.start_btn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.start_btn.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.start_btn.setStyleSheet("")
        self.start_btn.setObjectName("start_btn")
        self.stop_btn = QtWidgets.QPushButton(parent=Dialog)
        self.stop_btn.setEnabled(False)
        self.stop_btn.setGeometry(QtCore.QRect(260, 380, 241, 45))
        self.stop_btn.setMinimumSize(QtCore.QSize(0, 45))
        self.stop_btn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.stop_btn.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.stop_btn.setObjectName("stop_btn")
        self.cursor_position_group_box = QtWidgets.QGroupBox(parent=Dialog)
        self.cursor_position_group_box.setGeometry(QtCore.QRect(260, 180, 241, 90))
        self.cursor_position_group_box.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.cursor_position_group_box.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignLeading |
            QtCore.Qt.AlignmentFlag.AlignLeft |
            QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.cursor_position_group_box.setObjectName("cursor_position_group_box")
        self.current_location_radio_button = QtWidgets.QRadioButton(parent=self.cursor_position_group_box)
        self.current_location_radio_button.setEnabled(True)
        self.current_location_radio_button.setGeometry(QtCore.QRect(10, 30, 118, 20))
        self.current_location_radio_button.setChecked(True)
        self.current_location_radio_button.setObjectName("current_location_radio_button")
        self.location_choice_group = QtWidgets.QButtonGroup(Dialog)
        self.location_choice_group.setObjectName("location_choice_group")
        self.location_choice_group.addButton(self.current_location_radio_button)
        self.custom_location_radio_button = QtWidgets.QRadioButton(parent=self.cursor_position_group_box)
        self.custom_location_radio_button.setGeometry(QtCore.QRect(10, 60, 16, 16))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.custom_location_radio_button.sizePolicy().hasHeightForWidth())
        self.custom_location_radio_button.setSizePolicy(sizePolicy)
        self.custom_location_radio_button.setText("")
        self.custom_location_radio_button.setObjectName("custom_location_radio_button")
        self.location_choice_group.addButton(self.custom_location_radio_button)
        self.custom_x_input = QtWidgets.QLineEdit(parent=self.cursor_position_group_box)
        self.custom_x_input.setEnabled(False)
        self.custom_x_input.setGeometry(QtCore.QRect(40, 58, 35, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.custom_x_input.sizePolicy().hasHeightForWidth())
        self.custom_x_input.setSizePolicy(sizePolicy)
        self.custom_x_input.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.custom_x_input.setFocusPolicy(QtCore.Qt.FocusPolicy.ClickFocus)
        self.custom_x_input.setStyleSheet("")
        self.custom_x_input.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.custom_x_input.setObjectName("custom_x_input")
        self.custom_x_input.setValidator(QIntValidator())
        self.custom_y_input = QtWidgets.QLineEdit(parent=self.cursor_position_group_box)
        self.custom_y_input.setEnabled(False)
        self.custom_y_input.setGeometry(QtCore.QRect(100, 58, 35, 20))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.custom_y_input.sizePolicy().hasHeightForWidth())
        self.custom_y_input.setSizePolicy(sizePolicy)
        self.custom_y_input.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.custom_y_input.setFocusPolicy(QtCore.Qt.FocusPolicy.ClickFocus)
        self.custom_y_input.setStyleSheet("")
        self.custom_y_input.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.custom_y_input.setObjectName("custom_y_input")
        self.custom_y_input.setValidator(QIntValidator())
        self.pick_loc_btn = QtWidgets.QPushButton(parent=self.cursor_position_group_box)
        self.pick_loc_btn.setEnabled(False)
        self.pick_loc_btn.setGeometry(QtCore.QRect(140, 56, 93, 23))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pick_loc_btn.sizePolicy().hasHeightForWidth())
        self.pick_loc_btn.setSizePolicy(sizePolicy)
        self.pick_loc_btn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.pick_loc_btn.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.pick_loc_btn.setObjectName("pick_loc_btn")
        self.custom_y_label = QtWidgets.QLabel(parent=self.cursor_position_group_box)
        self.custom_y_label.setEnabled(False)
        self.custom_y_label.setGeometry(QtCore.QRect(80, 60, 16, 16))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum,
                                           QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.custom_y_label.sizePolicy().hasHeightForWidth())
        self.custom_y_label.setSizePolicy(sizePolicy)
        self.custom_y_label.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignRight |
            QtCore.Qt.AlignmentFlag.AlignTrailing |
            QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.custom_y_label.setObjectName("custom_y_label")
        self.custom_x_label = QtWidgets.QLabel(parent=self.cursor_position_group_box)
        self.custom_x_label.setEnabled(False)
        self.custom_x_label.setGeometry(QtCore.QRect(20, 60, 16, 16))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Minimum,
                                           QtWidgets.QSizePolicy.Policy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.custom_x_label.sizePolicy().hasHeightForWidth())
        self.custom_x_label.setSizePolicy(sizePolicy)
        self.custom_x_label.setAlignment(
            QtCore.Qt.AlignmentFlag.AlignRight |
            QtCore.Qt.AlignmentFlag.AlignTrailing |
            QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.custom_x_label.setObjectName("custom_x_label")
        self.hotkey_group_box = QtWidgets.QGroupBox(parent=Dialog)
        self.hotkey_group_box.setGeometry(QtCore.QRect(260, 280, 241, 90))
        self.hotkey_group_box.setObjectName("hotkey_group_box")
        self.set_hotkey_btn = QtWidgets.QPushButton(parent=self.hotkey_group_box)
        self.set_hotkey_btn.setGeometry(QtCore.QRect(10, 25, 111, 31))
        self.set_hotkey_btn.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.set_hotkey_btn.setStyleSheet("border-top-left-radius: 10px;\n"
                                          "border-top-right-radius: 10px;\n"
                                          "border-bottom-left-radius: 0px;\n"
                                          "border-bottom-right-radius: 0px;")
        self.set_hotkey_btn.setObjectName("set_hotkey_btn")
        self.hotkey_label = QtWidgets.QLabel(parent=self.hotkey_group_box)
        self.hotkey_label.setGeometry(QtCore.QRect(130, 20, 101, 61))
        self.hotkey_label.setStyleSheet("background-color: rgb(209, 209, 209);\n"
                                        "color: rgb(111, 111, 111);")
        self.hotkey_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.hotkey_label.setObjectName("hotkey_label")
        self.set_default_hotkey_btn = QtWidgets.QPushButton(parent=self.hotkey_group_box)
        self.set_default_hotkey_btn.setGeometry(QtCore.QRect(10, 55, 111, 21))
        self.set_default_hotkey_btn.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.set_default_hotkey_btn.setStyleSheet("border-top-left-radius: 0px;\n"
                                                  "border-top-right-radius: 0px;\n"
                                                  "border-bottom-left-radius: 10px;\n"
                                                  "border-bottom-right-radius: 10px;")
        self.set_default_hotkey_btn.setObjectName("set_default_hotkey_btn")
        self.another_options_group_box = QtWidgets.QGroupBox(parent=Dialog)
        self.another_options_group_box.setGeometry(QtCore.QRect(10, 180, 241, 191))
        self.another_options_group_box.setObjectName("another_options_group_box")
        self.random_interval_check_box = QtWidgets.QCheckBox(parent=self.another_options_group_box)
        self.random_interval_check_box.setEnabled(True)
        self.random_interval_check_box.setGeometry(QtCore.QRect(12, 30, 161, 20))
        self.random_interval_check_box.setObjectName("random_interval_check_box")
        self.soon_label = QtWidgets.QLabel(parent=self.another_options_group_box)
        self.soon_label.setGeometry(QtCore.QRect(10, 60, 221, 121))
        self.soon_label.setStyleSheet("background-color: rgb(217, 217, 217);\n"
                                      "color: rgb(207, 207, 207);")
        self.soon_label.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.soon_label.setObjectName("soon_label")
        self.random_interval_input = QtWidgets.QSpinBox(parent=self.another_options_group_box)
        self.random_interval_input.setEnabled(True)
        self.random_interval_input.setGeometry(QtCore.QRect(170, 30, 61, 20))
        self.random_interval_input.setFocusPolicy(QtCore.Qt.FocusPolicy.ClickFocus)
        self.random_interval_input.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.random_interval_input.setButtonSymbols(QtWidgets.QAbstractSpinBox.ButtonSymbols.NoButtons)
        self.random_interval_input.setObjectName("random_interval_input")
        self.random_interval_input.setEnabled(False)
        self.random_interval_input.setMaximum(9999999)
        self.random_interval_input.setValue(self.options['random_interval'])
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        self.start_btn.clicked.connect(self.on_start_btn_clicked)
        self.stop_btn.clicked.connect(self.on_stop_btn_clicked)
        self.random_interval_check_box.clicked.connect(self.on_random_interval_check_box_clicked)
        self.current_location_radio_button.clicked.connect(self.on_current_location_radio_btn_clicked)
        self.custom_location_radio_button.clicked.connect(self.on_custom_location_radio_btn_clicked)
        self.set_default_hotkey_btn.clicked.connect(self.on_set_default_hotkey_btn_clicked)
        self.repeat_n_times_radio_button.clicked.connect(self.on_repeat_n_times_radio_button_clicked)
        self.until_stopped_radio_button.clicked.connect(self.on_until_stopped_radio_button_clicked)
        self.pick_loc_btn.clicked.connect(self.on_pick_loc_btn_clicked)
        self.set_hotkey_btn.clicked.connect(self.on_set_hotkey_btn_clicked)
        # threading.Thread(target=self.listen_keys).start()

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", self.window_name))
        Dialog.setWindowIcon(QtGui.QIcon(self.icon_path))
        self.click_interval_group_box.setTitle(_translate("Dialog", "Click Interval"))
        self.sec_interval_label.setText(_translate("Dialog", "Seconds"))
        self.min_interval_label.setText(_translate("Dialog", "Minutes"))
        self.millisec_interval_label.setText(_translate("Dialog", "Milliseconds"))
        self.hours_interval_label.setText(_translate("Dialog", "Hours"))
        self.click_options_group_box.setTitle(_translate("Dialog", "Click Options"))
        self.mouse_button_choice.setItemText(0, _translate("Dialog", "Left"))
        self.mouse_button_choice.setItemText(1, _translate("Dialog", "Right"))
        self.mouse_button_choice.setItemText(2, _translate("Dialog", "Middle"))
        self.click_type_choice.setItemText(0, _translate("Dialog", "Single"))
        self.click_type_choice.setItemText(1, _translate("Dialog", "Double"))
        self.click_type_choice.setItemText(2, _translate("Dialog", "Triple"))
        self.mouse_button_label.setText(_translate("Dialog", "Mouse Button:"))
        self.click_type_label.setText(_translate("Dialog", "Click Type:"))
        self.duration_label.setText(_translate("Dialog", "Duration:"))
        self.anti_detect_label.setText(_translate("Dialog", "Anti-detect:"))
        self.click_repeat_group_box.setTitle(_translate("Dialog", "Click Repeat"))
        self.repeat_n_times_radio_button.setText(_translate("Dialog", "Repeat:"))
        self.until_stopped_radio_button.setText(_translate("Dialog", "Until stopped"))
        self.start_btn.setText(_translate("Dialog", f"Start ({self.options['hotkey'].upper()})"))
        self.stop_btn.setText(_translate("Dialog", f"Stop ({self.options['hotkey'].upper()})"))
        self.cursor_position_group_box.setTitle(_translate("Dialog", "Cursor Position"))
        self.current_location_radio_button.setText(_translate("Dialog", "Current location"))
        self.custom_x_input.setText(_translate("Dialog", "0"))
        self.custom_y_input.setText(_translate("Dialog", "0"))
        self.pick_loc_btn.setText(_translate("Dialog", "Pick Location"))
        self.custom_y_label.setText(_translate("Dialog", "Y"))
        self.custom_x_label.setText(_translate("Dialog", "X"))
        self.hotkey_group_box.setTitle(_translate("Dialog", "Hotkey Settings"))
        self.set_hotkey_btn.setText(_translate("Dialog", "Set Hotkey"))
        self.hotkey_label.setText(_translate("Dialog",
                                             self.hotkey_label_font.format(self.options['hotkey'].upper())))
        self.set_default_hotkey_btn.setText(_translate("Dialog", "Default"))
        self.another_options_group_box.setTitle(_translate("Dialog", "Other Options"))
        self.random_interval_check_box.setText(_translate("Dialog", "Random Interval (+/-):"))
        self.soon_label.setText(_translate("Dialog",
                                           "<html><head/><body><p><span style=\" "
                                           "font-size:26pt;\">SOON</span></p></body></html>"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec())
